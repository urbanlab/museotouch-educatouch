#:kivy 1.0
#:import math math
#:set petita 'widgets/PetitaLight.ttf'
#:set petita_medium 'widgets/PetitaMedium.ttf'
#:set petita_bold 'widgets/PetitaBold.ttf'
#:set color_keyword_hi [0.9098039215686274, 0.34509803921568627, 0.06666666666666667, 1] #get_color_from_hex('#e85811')
#:set color_title_hi [0.8862745098039215, 0.19215686274509805, 0.15294117647058825, 1] #get_color_from_hex('#e23127')
#:set color_normal [0.7764705882352941, 0.7764705882352941, 0.7764705882352941, 1] #get_color_from_hex('#c6c6c6')

<ImageItem>:
	border: 2 / self.scale
	size_hint: None, None
	size: 512, 512
	scale: 0.50
	container: container
	scale_min: .5
	scale_max: 10
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			pos: -self.border, -self.border
			size: self.width + self.border * 2, self.height + self.border * 2
		Color:
			rgb: 0, 0, 0
		Rectangle:
			size: self.size

	FloatLayout:
		size: root.size

		FloatLayout:
			id: container

		Image:
			color: root.color
			source: root.source
			size_hint: (1 * (0.3 + 0.7 * root.flip_alpha), 1 * (0.3 + 0.7 * root.flip_alpha))
			pos_hint: {'top': 1}

	Button:
		background_color: (1, 1, 1, root.alpha_button)
		size: (64, 64)
		pos: 512 - 70, 512 - 70
		background_down: 'widgets/btn_moreinfo_down.png'
		background_normal: 'widgets/btn_moreinfo.png'
		on_release: root.on_btn_moreinfo()

	Label:
		text: (root.item.freefield or '') if root.flip_front else ''
		font_name: petita_medium
		size_hint_y: None
		height: self.texture_size[1] + 20
		width: self.texture_size[0] + 20
		font_size: 25


<ImageItemContent>:
	GridLayout:
		cols: 1
		rows_default_height: 30
		pos_hint: {'top': 0.7}
		size_hint_x: 0.3
		padding: 5
		Label:
			text: 'Partie du corps'
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_name: petita_bold
			font_size: 14
		Label:
			text: u'%s\n%s' % (root.item.origin, root.item.origin_ex)
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_name: petita
			font_size: 12
		Button:
			text: 'Voir les m√©dias' if len(root.item.medias) else ''
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_name: petita_bold
			font_size: 14
			on_release: root.toggle_media() if len(root.item.medias) else None
			background_color: (0, 0, 0, 0)
			color: (.8, .8, .8, 1)

	GridLayout:
		cols: 1
		pos_hint: {'x': 0.3}
		size_hint_x: 0.7

		canvas.before:
			Color:
				rgb: .1, .1, .1
			Rectangle:
				pos: self.x, self.top - self.height * (1 - root.flip_alpha)
				size: self.width, self.height * (1 - root.flip_alpha)

		Label:
			text: root.item.title
			text_size: (self.width - 20, None)
			valign: 'middle'
			font_size: 24
			font_name: petita_bold
			size_hint_y: None
			height: max(102, self.texture_size[1])
			color: (1, 1, 1, 1 - root.flip_alpha)

		Label:
			text: root.item.description
			text_size: (self.width - 20, None)
			size_hint_y: None
			font_name: petita
			font_size: 16
			height: self.texture_size[1]
			color: (1, 1, 1, 1 - root.flip_alpha)


<ItemMediaBrowser>:
	content: content
	canvas:
		Color:
			rgb: 0, 0, 0
		Rectangle:
			size: self.size
	BoxLayout:
		orientation: 'vertical'
		BoxLayout:
			id: content
		BoxLayout:
			orientation: 'horizontal'
			size_hint_y: None
			spacing: 10
			padding: 10
			height: 64
			Button:
				text: '<'
				on_release: root.index -= 1
				font_name: petita_bold
				background_color: (.1, .1, .1, .5)
				font_size: 14
			Button:
				text: 'Fermer'
				on_release: root.parent.toggle_media() if root.parent else None
				font_name: petita_bold
				background_color: (.1, .1, .1, .5)
				font_size: 14
			Button:
				text: '>'
				on_release: root.index += 1
				font_name: petita_bold
				background_color: (.1, .1, .1, .5)
				font_size: 14


<CircularSlider>:
    angle_min: self.value_min * 180
    angle_max: self.value_max * 180

    canvas:
        Color:
            rgb: 0.5490, 1, 1
        Ellipse:
            pos: self.right - self.outer_radius, self.center_y - self.outer_radius
            size: self.outer_radius * 2, self.outer_radius * 2
            angle_start: (root.angle_min + 180) % 360
            angle_end: ((root.angle_max + 180 - 0.00001) % 360)
        Color:
            rgb: 0, 0, 0
        Ellipse:
            pos: self.right - self.inner_radius + 50, self.center_y - self.inner_radius + 50
            size: (self.inner_radius - 50) * 2, (self.inner_radius - 50) * 2
        Color:
            rgb: 1, 1, 1
        Rectangle:
            source: 'widgets/timeline.png'
            pos: self.pos
            size: self.size
        Color:
            rgba: 0.5490, 1, 1, .2
        Line:
            points: (self.right - math.sin(math.radians(self.angle_min)) * self.outer_radius, self.center_y -math.cos(math.radians(self.angle_min)) * self.outer_radius, self.right - math.sin(math.radians(self.angle_min)) * (self.inner_radius - 50), self.center_y -math.cos(math.radians(self.angle_min)) * (self.inner_radius - 50))
        Line:
            points: (self.right - math.sin(math.radians(self.angle_max)) * self.outer_radius, self.center_y -math.cos(math.radians(self.angle_max)) * self.outer_radius, self.right - math.sin(math.radians(self.angle_max)) * (self.inner_radius - 50), self.center_y -math.cos(math.radians(self.angle_max)) * (self.inner_radius - 50))

    BoxLayout:
        size_hint: None, None
        size: (150, 80)
        pos_hint: {'center_x': 0.5, 'center_y': 0.38}
        orientation: 'vertical'
        canvas.before:
            PushMatrix
            Translate:
                xy: root.center_x, root.center_y
            Rotate:
                angle: 90
                axis: 0., 0., 1.
            Translate:
                xy: -root.center_x, -root.center_y
        canvas.after:
            PopMatrix

        Label:
            font_size: 16
            color: (0.5490, 1, 1, 1)
            text: root.text_min
        Label:
            font_size: 16
            color: (0.5490, 1, 1, 1)
            text: root.text_max

<SizeSlider>:
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			pos: self.x - 40, self.y
			size: (500, 30)
			source: 'widgets/taille.png'
        Color:
            rgb: 0.5490, 1, 1
		Rectangle:
			pos: self.x + self.value_min * self.width, self.center_y - 10
			size: self.width * (self.value_max - self.value_min), 20


<Keyword>:
	color: color_keyword_hi if self.selected else color_normal
	font_size: 25
	font_name: petita
	text_size: (self.width, None)

# Template used for Keyword item in accordion.
<KeywordsGroup>:
	cols: 1
	row_default_height: 40
	row_force_default: True

[KeywordItemTitle@Label]:
	text: ctx.title
	font_size: 42
	font_name: petita_bold
	text_size: (self.width, None)
	size_hint_y: 2
	color: color_title_hi if not ctx.item.collapse else color_normal
	#on_size: self.parent.minimum_size = (self.size)

[KeywordItemTitle_INITIALPRESENTATION@Label]:
	text: ctx.title
	font_size: 30
	font_name: 'data/fonts/DroidSans-Bold.ttf'
	text_size: (self.height - 20, None)
	color: (110/255., 205/255., 221/255., 1) if not ctx.item.collapse else (198/255., 198/255., 198/255., 1)
	canvas.before:
		PushMatrix
		Translate:
			xy: self.center_x, self.center_y
		Rotate:
			angle: 90 if ctx.item.orientation == 'horizontal' else 0
			axis: 0, 0, 1
		Translate:
			xy: -self.center_x, -self.center_y
	canvas.after:
		PopMatrix

