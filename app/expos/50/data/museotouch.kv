#:kivy 1.0
#:import math math

<ImageItem>:
	border: 2 / self.scale
	size_hint: None, None
	size: 512, 512
	scale: 0.5
	container: container
	scale_min: .5
	scale_max: 10
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			pos: -self.border, -self.border
			size: self.width + self.border * 2, self.height + self.border * 2
		Color:
			rgb: 0, 0, 0
		Rectangle:
			size: self.size

	FloatLayout:
		size: root.size

		FloatLayout:
			id: container

		Image:
			id:img_front
			source: root.source
			size_hint: (1 * (0.3 + 0.7 * root.flip_alpha), 1 * (0.3 + 0.7 * root.flip_alpha))
			pos_hint: {'top': 1}

	Button:
		background_color: (1, 1, 1, root.alpha_button)
		size: (64, 64)
		pos: 512 - 70, 512 - 70
		background_down: 'widgets/btn_moreinfo_down.png'
		background_normal: 'widgets/btn_moreinfo.png'
		on_release: root.on_btn_moreinfo()


<ItemMediaBrowser>:
	content: content
	canvas:
		Color:
			rgb: 0, 0, 0
		Rectangle:
			size: self.size
	BoxLayout:
		orientation: 'vertical'
		BoxLayout:
			id: content
		BoxLayout:
			orientation: 'horizontal'
			size_hint_y: None
			spacing: 10
			padding: 10
			height: 64
			Button:
				text: '<'
				on_release: root.index -= 1
				background_color: (.1, .1, .1, .5)
				font_size: 14
			Button:
				text: 'Fermer'
				on_press: root.parent.parent.parent.parent.image_opacity('up')
				on_release: root.parent.toggle_media() if root.parent else None
				background_color: (.1, .1, .1, .5)
				font_size: 14
			Button:
				text: '>'
				on_release: root.index += 1				
				background_color: (.1, .1, .1, .5)
				font_size: 14

<ImageItemContent>:
	GridLayout:
		cols: 1
		rows_default_height: 30
		pos_hint: {'top': 0.7}
		size_hint_x: 0.3
		padding: 5

		Label:
			text: 'Type de figure'
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 14
		Label:
			text: u'%s\n%s' % (root.item.origin, root.item.origin_ex)
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 12
		Label:
			text: 'Degré de difficulté'
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 14
		Label:
			text: u'%d' % (root.item.taille)
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 12
		Label:
			text: 'Informations' if root.item.freefield else ''
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 14
		Label:
			text: root.item.freefield or ''
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 12
		Button:
			text: 'Voir la démonstration' if len(root.item.medias) else ''
			text_size: (self.width, None)
			size_hint_y: None
			height: self.texture_size[1] + 10
			font_size: 14
			on_press: root.parent.parent.parent.image_opacity('down')
			on_release: root.toggle_media() if len(root.item.medias) else None
			background_color: (0, 0, 0, 0)
			# Etat normal : couleur blanche (1,1,1,1). Etat appuyé : couleur rgba : (r/255, g/255, b/255, 1) (a = alpha = opacité = 1)
			color: (0, 0.45, 0.73, 1) if self.state == 'normal' else (0.5490, 1, 1, 1)

#partie du verso 70% avec place pour description
	GridLayout:
		cols: 1
		pos_hint: {'x': 0.3}
		size_hint_x: 0.7

		canvas.before:
			Color:
				rgb: .1, .1, .1
			Rectangle:
				pos: self.x, self.top - self.height * (1 - root.flip_alpha)
				size: self.width, self.height * (1 - root.flip_alpha)

		Label:
			text: root.item.title
			text_size: (self.width - 20, None)
			valign: 'middle'
			font_size: 16
			size_hint_y: None
			height: max(102, self.texture_size[1])
			color: (1, 1, 1, 1 - root.flip_alpha)

		Label:
			text: root.item.description.replace('\r','')
			text_size: (self.width - 20, None)
			size_hint_y: None
			height: self.texture_size[1]
			color: (1, 1, 1, 1 - root.flip_alpha)

<Keyword>:
	color: (1, 1, 1, 1) if self.selected else (.5, .5, .5, 1) 
	canvas.before:
		Color:
			rgb: 1, 1, 1
		Rectangle:
            pos: int(self.center_x - self.texture_size[0] / 2. - 32), int(self.center_y - 10)
			size: 20, 20
			source: 'widgets/circle%s.png' % ('_selected' if self.selected else '')

<SizeSlider>:
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			pos: self.x, self.y
			size: (500, 150)
			source: 'widgets/difficulte.png'
        Color:
            rgb: 0.5490, 1, 1
		Rectangle:
			pos: self.x + self.value_min * self.width, self.center_y + 50
			size: self.width * (self.value_max - self.value_min), 10


